#include <iostream>
#include <vector>
#include "libpathfindwrapper.h"  // 包含对应的头文件

int main() {
    const char* floorPlan = R"json({
    "canvas": {"w": 800, "h": 600},
    "polygons": [
        [
        {"x": 73.4375, "y": 55},
        {"x": 288.4375, "y": 54},
        {"x": 287.4375, "y": 172},
        {"x": 231.4375, "y": 171},
        {"x": 233.4375, "y": 203},
        {"x": 665.4375, "y": 203},
        {"x": 665.4375, "y": 299},
        {"x": 630.4375, "y": 299},
        {"x": 630.4375, "y": 331},
        {"x": 711.4375, "y": 331},
        {"x": 710.4375, "y": 166},
        {"x": 508.4375, "y": 167},
        {"x": 508.4375, "y": 113},
        {"x": 471.4375, "y": 112},
        {"x": 473.4375, "y": 149},
        {"x": 381.4375, "y": 149},
        {"x": 379.4375, "y": 39},
        {"x": 470.4375, "y": 37},
        {"x": 470.4375, "y": 79},
        {"x": 510.4375, "y": 81},
        {"x": 509.4375, "y": 37},
        {"x": 600.4375, "y": 37},
        {"x": 600.4375, "y": 129},
        {"x": 613.4375, "y": 128},
        {"x": 613.4375, "y": 39},
        {"x": 783.4375, "y": 38},
        {"x": 782.4375, "y": 165},
        {"x": 736.4375, "y": 166},
        {"x": 735.4375, "y": 361},
        {"x": 602.4375, "y": 361},
        {"x": 602.4375, "y": 296},
        {"x": 551.4375, "y": 296},
        {"x": 551.4375, "y": 242},
        {"x": 530.4375, "y": 241},
        {"x": 531.4375, "y": 291},
        {"x": 411.4375, "y": 291},
        {"x": 410.4375, "y": 241},
        {"x": 388.4375, "y": 240},
        {"x": 393.4375, "y": 290},
        {"x": 205.4375, "y": 288},
        {"x": 205.4375, "y": 238},
        {"x": 179.4375, "y": 238},
        {"x": 164.4375, "y": 265},
        {"x": 157.4375, "y": 316},
        {"x": 195.4375, "y": 337},
        {"x": 257.4375, "y": 335},
        {"x": 362.4375, "y": 408},
        {"x": 404.4375, "y": 409},
        {"x": 465.4375, "y": 336},
        {"x": 522.4375, "y": 336},
        {"x": 596.4375, "y": 407},
        {"x": 595.4375, "y": 476},
        {"x": 564.4375, "y": 511},
        {"x": 595.4375, "y": 526},
        {"x": 644.4375, "y": 526},
        {"x": 645.4375, "y": 548},
        {"x": 666.4375, "y": 548},
        {"x": 663.4375, "y": 525},
        {"x": 691.4375, "y": 525},
        {"x": 690.4375, "y": 487},
        {"x": 642.4375, "y": 486},
        {"x": 639.4375, "y": 396},
        {"x": 764.4375, "y": 395},
        {"x": 762.4375, "y": 485},
        {"x": 719.4375, "y": 485},
        {"x": 716.4375, "y": 521},
        {"x": 769.4375, "y": 520},
        {"x": 770.4375, "y": 582},
        {"x": 601.4375, "y": 583},
        {"x": 598.4375, "y": 551},
        {"x": 573.4375, "y": 551},
        {"x": 576.4375, "y": 582},
        {"x": 522.4375, "y": 581},
        {"x": 519.4375, "y": 510},
        {"x": 472.4375, "y": 512},
        {"x": 408.4375, "y": 439},
        {"x": 362.4375, "y": 438},
        {"x": 277.4375, "y": 507},
        {"x": 198.4375, "y": 506},
        {"x": 140.4375, "y": 447},
        {"x": 139.4375, "y": 392},
        {"x": 172.4375, "y": 363},
        {"x": 139.4375, "y": 340},
        {"x": 118.4375, "y": 311},
        {"x": 129.4375, "y": 261},
        {"x": 123.4375, "y": 235},
        {"x": 78.4375, "y": 233},
        {"x": 77.4375, "y": 328},
        {"x": 23.4375, "y": 328},
        {"x": 26.4375, "y": 199},
        {"x": 197.4375, "y": 202},
        {"x": 198.4375, "y": 172},
        {"x": 76.4375, "y": 168}
        ],
        [
        {"x": 512.4375, "y": 386},
        {"x": 539.4375, "y": 430},
        {"x": 492.4375, "y": 464},
        {"x": 462.4375, "y": 419},
        {"x": 496.4375, "y": 385}
        ],
        [
        {"x": 245.4375, "y": 383},
        {"x": 298.4375, "y": 414},
        {"x": 264.4375, "y": 461},
        {"x": 220.4375, "y": 462},
        {"x": 192.4375, "y": 433},
        {"x": 188.4375, "y": 398}
        ],
        [
        {"x": 683.4375, "y": 80},
        {"x": 686.4375, "y": 141},
        {"x": 652.4375, "y": 143},
        {"x": 652.4375, "y": 82}
        ]
    ]
    })json";

    double startX = 80, startY = 80, endX = 620, endY = 580, height = 70;

    // Call the Go function and get the result in the form of FindPath_return struct
    FindPath_return result = FindPath(const_cast<char*>(floorPlan), startX, startY, endX, endY, height);

    // Access the returned pointer and size from the FindPath_return struct
    Vec3* raw_result = result.r0; // Assuming r0 is the pointer to Vec3 array
    int size = result.r1;         // Assuming r1 is the size of the array

    // Convert the C array to a std::vector<Vec3>
    std::vector<Vec3> path(raw_result, raw_result + size);

    // Print or process the results
    for (const Vec3& point : path) {
        std::cout << "(" << point.x << ", " << point.y << ", " << point.z << ")" << std::endl;
    }

    // Free the memory allocated in Go
    free(raw_result);

    return 0;
}